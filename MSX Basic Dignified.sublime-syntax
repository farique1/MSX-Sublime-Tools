%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
#
# See https://github.com/farique1/MSX-Sublime-Tools
# for updates and other MSX Sublime tools
#
# v1.3.1
#   Added ##BB:monitor_exec=
# v1.3.0
# Added FUNC proto-function definition and calling
# Added FN function name highlight

author: Fred Rique (farique)
url: https://github.com/farique1/MSX-Sublime-Tools
comment: v1.3.1

name: MSX Basic Dignified
file_extensions: bad
scope: source.msxbasicdignified

# All case insensitive
contexts:
  prototype:
  - include: 'Comments'

  main:
    # Double quotes
    - match: '"'
      push: double_quoted_string

    # Badig Build configs
    - match: (^##BB:)(export_path|export_file|convert_only|throttle|arguments|override_machine|override_extension|monitor_exec)(=)(.*$)
      captures:
        1: comment.msxbasic
        2: variable.parameter.msxbasic
        3: comment.msxbasic
        4: entity.name.class.line.msxbasic

    # Comment ##
    - match: '(^|\s*)##.*\n'
      scope: comment.msxbasic

    # Comment line ' and REM
    - match: (?i:'|(^\s*|:\s*)rem)
      push:
        - match: '{\d+?}'
        - meta_scope: comment.msxbasic
        - match: '{(\w+?|@)}'
          scope: entity.name.class.line.msxbasic
        - match: (^\s*)((?i:endif))(?=\s*$)
          captures:
            2: invalid.deprecated.msxbasic
        - match: '_\s*$\n'
          scope: entity.name.tag.msxbasic
        - match: '\:\s*$\n'
          push:
              - match: (^\s*)((?i:endif))(?=\s*$)
                captures:
                  2: invalid.deprecated.msxbasic
              - match:  (^\s*)(\d+)\s*(\d*)
                captures:
                  2: invalid.deprecated.msxbasic
                  3: invalid.deprecated.msxbasic
              - match: '(?<!:)(?<!_)(?=$\n)'
                pop: true
        - match: '(?<!:)(?<!_)$\n'
          pop: true

    # DATA line highlights elements and comma only
    - match: '\b(?i:data)\b'
      push: data_line
      scope: keyword.control.msxbasic

    # Labels with only numbers
    - match: '{\d+?}'
      scope: invalid.msxbasic

    # Labels with valid characters
    - match: '{(\w+?|@)}'
      scope: entity.name.class.line.msxbasic

    # Labels with everything else
    - match: '{.+?}'
      scope: invalid.msxbasic

    # Round brackets balancing warning (only highlights missing closed)
    - match: \(
      push: brackets
    - match: \)
      scope: invalid.msxbasic

    # Define [?@] - print at
    - match: '\[\?@\]'
      scope: keyword.control.msxbasic

    # Define lines
    - match: (?i:)(^\s*define(\s+|$))((,|\w+)|(?=\[|\s))
      captures:
        1: entity.name.tag.msxbasic
        3: invalid.msxbasic
      push:
        - match: '(?<=\]),\s*,(?=\[)'
          scope: invalid.msxbasic
        - match: '\[[^\]\[#]+\]\s*(?=\[)'
          scope: variable.parameter.msxbasic
        - match: '##.*$'
          scope: comment.msxbasic
        - match: '\['
          scope: variable.parameter.msxbasic
          push:
            # - meta_scope: keyword.control.msxbasic
            - match: '\['
              scope: variable.parameter.msxbasic
              push:
                # - meta_scope: support.function.msxbasic
                - match: '\['
                  scope: invalid.msxbasic
                - match: '\]'
                  scope: variable.parameter.msxbasic
                  pop: true
                - include: main
            - match: '\]|(?=$\n|##)'
              scope: variable.parameter.msxbasic
              pop: true
            - include: main
        - match: '[^\]# \t]+\s*(?=\n|##)'
          scope: invalid.msxbasic
        - match: '[^, \t]+(?=,|\s*\[|##|$\n)'
          scope: invalid.msxbasic
        - match: (?=$|##)
          pop: true
        - include: main

    # Define brackets
    - match: '\[.+?\]'
      scope: variable.parameter.msxbasic

    # Line join character _
    - match: '_(\s+(?=$|(?=##)))'
      push: break_line
      scope: entity.name.tag.msxbasic

    # Special cases for on xxx goto/gosub (are there more?)
    - match: \b(?i:error|interval|key|sprite|stop|strig)\s*(?=(?i:goto|gosub))\b
      scope: support.function.msxbasic

    # Special cases for defusr e usr
    - match: \b(?i:def\s*usr(\d?))\b
      captures:
        0: keyword.control.msxbasic
        1: constant.numeric.msxbasic
    - match: \b(?i:usr\s*(\d?)(?=\())\b
      captures:
        0: support.function.msxbasic
        1: constant.numeric.msxbasic

    #def fn
    - match: \b(?i:(fn)\s+(~?)(\w+)(\$|\%|\!|\#)?(?=\())
      captures:
        1: support.function.msxbasic
        2: keyword.operator.msxbasic
        3: support.function.msxbasic
        4: keyword.operator.msxbasic

    # Instructions (several are position and context sensitive)
    # review: base key play strig stick pdl pad time date set...
    # catching 'key' if after ^ or : unless followed by (
    # Call previous matches (\sadjust|\spause|\spcmplay|\spcmrec|(\s\w{,15})|\b)
    - match: \b(?i:as(?=\s*#|\s*\w+\$)|auto|as|beep|bload|bsave|circle|clear|cload|close|cls|cmd|color|cont|copy|copy|csave|csrlin|data|(def)(dbl|(?=\s?fn)|int|sng|str)|delete|dim|draw|dsko\$|else|end|erase|error|field|files|for|get|gosub|goto|if|input(?!\$)|interval|ipl|kanji|key(?!(\()| +\()|kill|let|line|list|llist|load|locate|lprint|lset|maxfiles|merge|motor|name|new|next|off|on|open|out|output|paint|play(?!(\()| +\()|point|poke|preset|print|pset|put|read|renum|restore|resume|return|rset|run|save|screen|(set)(\sadjust|\sbeep|\spage|\spassword|\sprompt|\sscreen|\sscroll|\stitle|\svideo|\b)|sound|sprite\$|sprite|step|stop|swap|then|to|troff|tron|using|vpoke|wait|width)\b
      scope: keyword.control.msxbasic

    # Functions no $ (several are position and context sensitive)
    # review: base key play strig stick pdl pad time date set...
    - match: \b(?i:abs|asc|atn|base|cdbl|cdbl|cint|cint|cos|csng|csng|cvd|cvi|cvs|date|dskf|eof|erl|err|exp|fix|fn|fpos|fre|inp|instr|int|key(?=(\(|\s+\())|len|loc|lof|log|lpos|pad|pdl|peek|play(?=(\(|\s+\())|pos|rnd|sgn|sin|spc|sqr|stick|strig|tab|tan|time|val|varptr|varptr|vdp|vpeek)\b
      scope: support.function.msxbasic

    # Call and _ get any 15 char string.
    - match: \b(call\s+|_\s*)(\w{,15})\b
      captures:
        1: keyword.control.msxbasic
        2: support.function.msxbasic

    # ? do not work with the \b on the instructions match
    - match: '[\?]'
      scope: keyword.control.msxbasic

    # Functions $ (several are position and context sensitive)
    - match: \b(?i:attr\$|bin\$|chr\$|hex\$|inkey\$|input\$|left\$|mid\$|mkd\$|mki\$|mks\$|oct\$|right\$|space\$|str\$|string\$)
      scope: support.function.msxbasic

    # include
    - match: (?i:^\s*include)\b
      scope: entity.name.tag.msxbasic

    # Endif if alone
    - match: (?i:^\s*endif\s*$)
      scope: keyword.control.msxbasic

    # Endif if not alone nor on rem, quote, data
    - match: (?i:endif)
      scope: invalid.deprecated.msxbasic

    # function definition
    - match: (?i:)(^\s*func\s+)
      scope: entity.name.tag.msxbasic

    # function name
    - match: (?i:)(\.\w+)(?=\()
      scope: entity.name.class.line.msxbasic

    # colon - instruction separator
    - match: ':'
      scope: comment.msxbasic

    # Separators
    - match: '[.,;]'
      scope: keyword.operator.msxbasic

    # Operators signs
    - match: (?i:\+|-|\*|/|\^|\\|=|<>|>=|<=|<|>)
      scope: keyword.operator.msxbasic

    # Operators names
    - match: \b(?i:and|or|not|xor|eqv|imp|mod)\b
      scope: keyword.operator.msxbasic

    # Boolean type
    - match: \b(?i:true|false)\b
      scope: constant.numeric.msxbasic

    # Declare lines
    - match: (?i:)(^\s*declare(\s+|$))((,)|(?=.|\s))
      captures:
        1: entity.name.tag.msxbasic
        4: invalid.msxbasic
      push:
        # - meta_scope: constant.global.msxbasic
        - match: '##.*$'
          scope: comment.msxbasic
        - match: '(?<=\W)\d+(?=\W)'
          scope: invalid.msxbasic
        - match: '(?<=\W)\w{0,2}(?=\W)'
          scope: invalid.msxbasic
        - match: \s*(\w+)((\:)[a-z][a-z0-9]?)?\s*(?=\n|,|##)
          captures:
            1: constant.global.msxbasic
            2: variable.parameter.msxbasic
            3: keyword.operator.msxbasic
        - match: '[^,]+?(?=\n|,|##)'
          scope: invalid.msxbasic
        - match: ',\s*(?=\n|,|##)'
          scope: invalid.msxbasic
        - match: (?=$|##)
          pop: true
        - include: main

    # Number at beginning of line
    - match: (^\s*)(\d+|#)\s*(\d*)
      captures:
        2: invalid.deprecated.msxbasic
        3: invalid.deprecated.msxbasic

    # Numbers
    - match: '(#?)\b([0-9]+[0-9]*)(\.?)([ed][+-])?\b([%!#]?)'
      captures:
        1: keyword.operator.msxbasic
        2: constant.numeric.msxbasic
        3: keyword.operator.msxbasic
        4: keyword.operator.msxbasic
        5: keyword.operator.msxbasic

    # Variables
    - match: '(#?)([A-Za-z]\d*)([%!#\$]?)'
      captures:
        1: keyword.operator.msxbasic
        2: constant.global.msxbasic
        3: keyword.operator.msxbasic

    # Hex and binary numbers (bug if word after hex touching and beginning with a-f)
    - match: '(&[hH])([0-9a-fA-F]+)|(&[bB])([01]+)|(&[oO])([0-7]+)'
      captures:
        1: keyword.operator.msxbasic
        2: constant.numeric.msxbasic
        3: keyword.operator.msxbasic
        4: constant.numeric.msxbasic
        5: keyword.operator.msxbasic
        6: constant.numeric.msxbasic

    # Declare indicator
    - match: ~
      scope: variable.parameter.msxbasic
      push:
        - match: \d+(?=\W)
          scope: invalid.msxbasic
        - match: \w{0,2}(?=\W)
          scope: invalid.msxbasic
        - match: (\b|(?=\W))
          pop: true
        - include: main

  break_line:
    - match: (^|\s*)\d+
      scope: constant.numeric.msxbasic
    - match: ((?=_)|\n)
      pop: true
    - include: main

    # Quotes: show join line character _
  double_quoted_string:
    - meta_scope: string.quoted.double.msxbasic
    - match: '_(\s+$)'
      scope: entity.name.tag.msxbasic
    - match: '"|[^_]$'
      pop: true

    # comment (##) stops the highlight, continue if _ added at the end.
    # But _ MUST also be added before the ## so the lines can join
  data_line:
    - meta_scope: constant.global.msxbasic
    - match: ','
      scope: keyword.operator.msxbasic
    - match: '(_)(\s+($|(##.*\n)))'
      captures:
        1: entity.name.tag.msxbasic
        4: comment.msxbasic
      push:
        - match: $|(?=:)
          pop: true
        - include: data_line
    - match: '".*"'
      scope: constant.global.msxbasic
    - match: '(?<!\S)##.*'
      scope: comment.msxbasic
    - match: (^\s*)((?i:endif))(?=\s*$)
      captures:
        2: invalid.deprecated.msxbasic
    - match: '$\n|(?=:)'
      pop: true

    # Round brackets
  brackets:
    - match: \)
      pop: true
    - include: main