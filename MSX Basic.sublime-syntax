%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
name: MSX Basic
file_extensions: bas
scope: source.msxbasic

# All case insensitive
contexts:
  main:
    # Double quotes
    - match: '"'
      push: double_quoted_string

    # Comment line ' ## REM
    - match: (?i:'|rem)
      push: comment_line

    # DATA line highlights elements and comma only
    - match: '(?i:data)'
      push: data_line
      scope: keyword.control.msxbasic

    # Round brackets balancing warning (only highlights missing closed)
    - match: \(
      push: brackets
    - match: \)
      scope: invalid.msxbasic

    # Special cases for on xxx goto/gosub (there are more?)
    - match: '(?i:error|interval|key|sprite|stop|strig)\s*(?=(?i:goto|gosub))'
      scope: support.function.msxbasic

    # Instructions (several are position and context sensitive)
    # review: base key play strig stick pdl pad time date set...
    # catching 'key' if after ^ or : unless folowed by (
    - match: (?i:\_(\w+)|\?|as(?=\s*#|\s*\w+\$)|auto|beep|bload|bsave|(call)(\sadjust|\spause|\spcmplay|\spcmrec|\b)|circle|clear|cload|close|cls|cmd|color|cont|copy|copy|csave|csrlin|data|(def)(dbl|(?=\s?fn)|int|sng|str|\s?usr)|delete|dim|draw|dsko\$|else|end|erase|error|field|files|for|get|gosub|goto|if|input|interval|ipl|kanji|(?<=:|^)\s*key(?!\()|kill|let|line|list|llist|load|locate|lprint|lset|maxfiles|merge|motor|name|new|next|off|on|open|out|paint|play(?!(\()| +\()|point|poke|preset|print|pset|put|read|renum|restore|resume|return|rset|run|run|save|screen|(set)(\sadjust|\sbeep|\spage|\spassword|\sprompt|\sscreen|\sscroll|\stitle|\svideo|\b)|sound|sprite\$|sprite|step|stop|swap|then|to|troff|tron|using|vpoke|wait|width)
      scope: keyword.control.msxbasiccomment.msxbasic

    # Functions (several are position and context sensitive)
    # review: base key play strig stick pdl pad time date set...
    - match: (?i:abs|asc|atn|attr\$|base|bin\$|cdbl|cdbl|chr\$|cint|cint|cos|csng|csng|cvd|cvi|cvs|date|dskf|eof|erl|err|exp|fix|fn|fpos|fre|hex\$|inkey\$|inp|input\$|instr|int|key|left\$|len|loc|lof|log|lpos|mid\$|mkd\$|mki\$|mks\$|oct\$|pad|pdl|peek|play(?=(\(|\s+\())|pos|right\$|rnd|sgn|sin|space\$|spc|sqr|stick|str\$|strig|string\$|tab|tan|time|usr|val|varptr|varptr|vdp|vpeek)
      scope: support.function.msxbasic

    # colon - instruction separator
    - match: ':'
      scope: comment.msxbasic

    # Separators
    - match: '[.,;]'
      scope: keyword.operator.msxbasic

    # Operators
    - match: (?i:\+|-|\*|/|\^|\\|=|<|>|and|or|not|xor|eqv|imp|mod)
      scope: keyword.operator.msxbasic

    # Numbers
    - match: ([1-9]+[0-9]*|0)
      scope: constant.numeric.msxbasic

    # Variables
    - match: '[A-Za-z]\d'
      scope: constant.global.msxbasic

    # Hex and binary numbers (bug if word after hex touching and beggining with a-f)
    - match: '(&[hH])([0-9a-fA-F]+|)|(&[bB])([01]+|)'
      captures:
        2: constant.numeric.msxbasic
        4: constant.numeric.msxbasic

    # Quotes: show join line character _
  double_quoted_string:
    - meta_scope: string.quoted.double.msxbasic
    - match: '"|$'
      pop: true

    # Comments: include labels and continues next line if ending wit : or _
    # (does not continue if next line begins with numbers)
  comment_line:
    - meta_scope: comment.msxbasic
    - match: '{\d+?}'
      scope: comment.msxbasic
    - match: '{(\w+?|@)}'
      scope: entity.name.class.line.msxbasic
    - match: '$\n'
      pop: true

    # DATA: show join lines character _ and continue next line with _ (stops if :)
    # Bug > ## comment stops the highlight. can be avoided adding _ at the end
  data_line:
    - meta_scope: constant.global.msxbasic
    - match: ','
      scope: variable.parameter.msxbasic
    - match: '($\n|:)'
      scope: comment.msxbasic
      pop: true

    # Round brackets
  brackets:
    - match: \)
      pop: true
    - include: main